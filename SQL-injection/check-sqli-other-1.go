// Verify SQL injection - Portswigger SQL injection - Lab 1
// https://portswigger.net/web-security/sql-injection/lab-retrieve-hidden-data
// usage:
// go run sql.go -u "https://test.com/?category=" -s "texttocompare" -p "payload"
// try with payload url encoded

package main

import (
	"fmt"
	"flag"
	"io"
	"log"
	"net/http"
	"strings"
	"time"
)

func main() {
	var textPtr = flag.String("u", "", "Text to parse.") //url
	var hasTEXT = flag.String("s", "", "Text to parse.") //"text to compare"
	var payload = flag.String("p", "", "Text to parse.") //"encoded:payload" 
	flag.Parse()
	req, err := http.NewRequest("GET", *textPtr + *payload, nil)
	if err != nil {
		log.Fatalln(err)
	}

	req.Header.Set("Accept", "application/json")

	client := http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatalln(err)
	}
	defer resp.Body.Close()

	b, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}
	
	s := string(b)
	matched := strings.Contains(s, *hasTEXT) //search for hasTEXT in the source code
	if matched {
		fmt.Println("[+] Possible SQL Injection found !")
		time.Sleep(1 * time.Second)
	} else {
		fmt.Println("[-] No SQL Injection found.")
	}
	//fmt.Println(string(b)) //print the body response
}